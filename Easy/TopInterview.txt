344. Reverse String
Easy

835

541

Favorite

Share
Write a function that reverses a string. The input string is given as an array of characters char[].

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

You may assume all the characters consist of printable ascii characters.

 

Example 1:

Input: ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]

class Solution(object):
    def reverseString(self, s):
        s[:]=s[::-1]

        return s
Next challenges:
Reverse Vowels of a String
Reverse String II

136. Single Number
Easy
Given a non-empty array of integers, every element appears twice except for one. Find that single one.
class Solution:
    def singleNumber(self, nums):
        d = {}
        for n in nums:
            if n in d: del d[n]
            else: d[n] = 1
        
        for k in d:
            return k
        
        return float('inf') 
        
class Solution:
    def singleNumber(self, nums: List[int]) -> int:
    	L, d = len(nums), {}
    	for n in nums:
    		if n in d: del d[n]
    		else: d[n] = 1
    	return list(d)[0]
		

Next challenges:
Single Number II
Single Number III
Missing Number
Find the Duplicate Number
Find the Difference

125. Valid Palindrome
Easy

661

1937

Favorite

Share
Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

Note: For the purpose of this problem, we define empty string as valid palindrome.

Example 1:

Input: "A man, a plan, a canal: Panama"
Output: true
Example 2:

Input: "race a car"
Output: false
class Solution:
    def isPalindrome(self, s):
    	s = [i for i in s.lower() if i.isalnum()]
    	return s == s[::-1]
    	
 680. Valid Palindrome II
Easy

826

55

Favorite

Share
Given a non-empty string s, you may delete at most one character. Judge whether you can make it a palindrome.

Example 1:
Input: "aba"
Output: True

class Solution(object):
    def validPalindrome(self, s):
        """
        :type s: str
        :rtype: bool
        """
        i = 0
        j = len(s) - 1
        while i < j:
            if s[i] == s[j]:
                i += 1
                j -= 1
            else:
                a = s[i+1:j+1]
                b = s[i:j]
                return a == a[::-1] or b == b[::-1]
        return True
        
 Next challenges:
Basic Calculator II
Count Different Palindromic Subsequences
Groups of Special-Equivalent Strings

Next challenges:
Valid Palindrome II
190. Reverse Bits
Easy

613

210

Favorite

Share
Reverse bits of a given 32 bits unsigned integer.

 

Example 1:

Input: 00000010100101000001111010011100
Output: 00111001011110000010100101000000
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.



class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        s = '{0:032b}'.format(n)
        return int(s[::-1], 2)
		
Next challenges:
Number of 1 Bits

class Solution(object):
    def hammingWeight(self, n):
        count = 0 
        while n > 0:
            if n % 2:
                count += 1
            n >>= 1
        return count
 Next challenges:
Power of Two
Counting Bits
Binary Watch
Hamming Distance
Binary Number with Alternating Bits
172. Factorial Trailing Zeroes
Easy

531

765

Favorite

Share
Given an integer n, return the number of trailing zeroes in n!.

Example 1:

Input: 3
Output: 0
Explanation: 3! = 6, no trailing zero.
class Solution:
    def trailingZeroes(self, n):
        if n<5:
            return 0
        x=0
        while n != 0:
            x += n // 5
            #print (n,x)
            n //= 5
            
        return x
141. Linked List Cycle
Easy

1730

208

Favorite

Share
Given a linked list, determine if it has a cycle in it.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where tail connects to the second node.
class Solution(object):
    def hasCycle(self, head):
        marker1 = head
        marker2 = head
        while marker2!=None and marker2.next!=None:
            marker1 = marker1.next
            marker2 = marker2.next.next
            if marker2==marker1:
                return True
        return False
 Next challenges:
Linked List Cycle II
Happy Number


Next challenges:
Linked List Cycle II
Happy Number






198. House Robber
Easy

2865

88

Favorite

Share
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.

Example 1:

Input: [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
             Total amount you can rob = 1 + 3 = 4.
class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        rob, not_rob = 0, 0
        for num in nums:
            rob, not_rob = not_rob + num, max(rob, not_rob)
            #print(num,rob, not_rob)
        return max(rob, not_rob)
Next challenges:
Maximum Product Subarray
House Robber II
Paint House
Paint Fence
House Robber III
Non-negative Integers without Consecutive Ones
Coin Path
Delete and Earn


326. Power of Three
Easy

315

1126

Favorite

Share
Given an integer, write a function to determine if it is a power of three.

Example 1:

Input: 27
Output: true
Example 2:

Input: 0
Output: false

class Solution(object):
    def isPowerOfThree(self, n):
        while n > 2:
            if n % 3 > 0: return False
            n = n / 3
        return n == 1
        
 without loop
 from math import log
class Solution(object):
    def isPowerOfThree(self, n):
        if n<1: return False
        return round(log(n, 3),9) == round(log(n, 3))
 
 118. Pascal's Triangle
Easy

808

82

Favorite

Share
Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.
class Solution(object):
    def generate(self, numRows):
        """
    :type numRows: int
    :rtype: List[List[int]]
    """
   
        ans=[]
        for i in range(1,numRows+1):
            if i == 1: temp=[1]
            elif i == 2: temp=[1,1]
            else:
                a=ans[i-2]
                b=[]
                for j in range(len(a)-1):
                    b.append(a[j]+a[j+1])
                temp=[1]+b+[1]
            ans.append(temp)
        return ans
 Next challenges:
 Pascal's Triangle II      
        
 In Pascal's triangle, each number is the sum of the two numbers directly above it.

122. Best Time to Buy and Sell Stock II
Easy

1171

1380

Favorite

Share
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).

Example 1:

Input: [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Best Time to Buy and Sell Stock III
Best Time to Buy and Sell Stock IV
Best Time to Buy and Sell Stock with Cooldown
Best Time to Buy and Sell Stock with Transaction Fee

Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.

Example:

n = 15,

Return:
[
    "1",
    "2",
    "Fizz",
    "4",
    "Buzz",
    "Fizz",
    "7",
    "8",
    "Fizz",
    "Buzz",
    "11",
    "Fizz",
    "13",
    "14",
    "FizzBuzz"
]

class Solution(object):
    def fizzBuzz(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        ls=[]
        for i in range(1,n+1):
            if i%3==0 and i%5==0:ls.append("FizzBuzz")
            elif i%3==0:ls.append("Fizz")
            elif i%5==0:ls.append("Buzz")
            else:ls.append(str(i))
        return ls
 Next challenges:
Convert a Number to Hexadecimal
Spiral Matrix III
Smallest Integer Divisible by K


283. Move Zeroes
Easy

2260

82

Favorite

Share
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Example:

Input: [0,1,0,3,12]
Output: [1,3,12,0,0]
Note:

You must do this in-place without making a copy of the array.
Minimize the total number of operations.

I hope I helped you in some way. If you like this solution, I'll be very happy if you click "Star" on Github:
https://github.com/JBielan/leetcode-python

As well feel free to follow my account for daily coding solutions and machine-learning/data-science projects:
https://github.com/JBielan

Next challenges:
Longest Line of Consecutive One in Matrix
Maximum Swap
Sum of Digits in the Minimum Number

class Solution(object):
    def moveZeroes(self, nums):
        i = 0
        end = len(nums)
        while i < end:
            if nums[i] == 0:
                del nums[i]
                nums.append(0)
                end -= 1
            else:
                i += 1


class Solution:
    def deleteNode(self, node):
        node.val, node.next = node.next.val, node.next.next
 Next challenges:
Remove Linked List Elements

237. Delete Node in a Linked List
Easy

842

4030

Favorite

Share
Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.

Given linked list -- head = [4,5,1,9], which looks like following:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def deleteNode(self, node):
        node.val, node.next = node.next.val, node.next.next

326. Power of Three
Easy

315

1127

Favorite

Share
Given an integer, write a function to determine if it is a power of three.

Example 1:

Input: 27
Output: true
Example 2:

Input: 0
Output: false

Next challenges:
Power of Two
Power of Four

from math import log
class Solution(object):
    def isPowerOfThree(self, n):
        if n<1: return False
        return round(log(n, 3),9) == round(log(n, 3))


202. Happy Number
Easy

971

252

Favorite

Share
Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Next challenges:
Add Digits
Ugly Number

350. Intersection of Two Arrays II
Easy

775

275

Favorite

Share
Given two arrays, write a function to compute their intersection.

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]


If the two lists num1 (assume num1 is of length n) and num2 (assume num2 is of length m) were not sorted,
 then we would take each number in num1 and compare it against each number in num2. This would mean we go through num2 n times. 
 The time complexity is quadratic, O(n*m).
 
 def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        # base case: null lists
        if not nums1 or not nums2:
            return []
        nums1.sort()
        nums2.sort()
        # set up two pointers
        pointer1 = 0
        pointer2 = 0
        # set up results list
        results = []
        while pointer1 < len(nums1) and pointer2 < len(nums2):
            if nums2[pointer2] < nums1[pointer1]:
                pointer2 += 1
                continue
            elif nums2[pointer2] == nums1[pointer1]:
                results.append(nums2[pointer2])
                pointer1 += 1
                pointer2 += 1
            else:
                pointer1 += 1
        return results
 Next challenges:
Intersection of Two Arrays
Find Common Characters

If the two lists were sorted, we can use a two pointer approach to obtain a linear solution O(n+m). This is because we move the pointer on num2 until the element being pointed to on num1 is greater than or equal to an element in num2. If the respective elements at that index of num1 and num2 are equal, we include that number in the final intersection. If not, we move over the pointer and continue. The solution better explains this two pointer approach.



268. Missing Number
Easy

1052

1439

Favorite

Share
Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        req_sum = len(nums)*(len(nums)+1)/2
        act_sum = sum(nums)
        return req_sum-act_sum
        
Next challenges:
Find the Duplicate Number
Couples Holding Hands


class Solution(object):
        def findDuplicate(self, nums):
            """
            :type nums: List[int]
            :rtype: int
            """
            dict1={}
            for x in nums:
                


                if x in dict1:
                    return x
                else:


169. Majority Element
Easy

1883

161

Favorite

Share
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3                    dict1[x]=1
class Solution(object):
    def majorityElement(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        l = list(nums)
        l.sort()
        return l[len(l)/2]
        
Majority Element II
Check If a Number Is Majority Element in a Sorted Array

217. Contains Duplicate
Easy

452

558

Favorite

Share
Given an array of integers, find if the array contains any duplicates.

Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.

Example 1:

Input: [1,2,3,1]
Output: true


# Method 1 -- Apply hashtable O(n)
    # hashNum = {}
    # for i in nums:
    #     if i not in hashNum:
    #         hashNum[i] = 1
    #     else:
    #         return True
    # return False
    
    # Method 2 -- Sorting
    # l =  len(nums)
    # if l < 2:
    #     return False
    # nums.sort()
    # for i in range(l-1):
    #     if nums[i] == nums[i+1]:
    #         return True
    # return False
    
    # Method 3 -- Set solution for python
    numsSet =  set(nums)
    if len(nums) == len(numsSet):
        return False
    return True
    
    Next challenges:
Contains Duplicate II
Contains Duplicate III


class Solution:
    def titleToNumber(self, s):
        val = 0
        for i in range(0, len(s)):
            chVal = ord(s[i]) - ord('A') + 1
            #print(chVal)
            power = pow(26, len(s) - 1 - i)
            #print(power)
            val += chVal * power
        return val
        
 Given a column title as appear in an Excel sheet, return its corresponding column number.

For example:

    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28 
    
    
    168. Excel Sheet Column Title
Easy

795

154

Favorite

Share
Given a positive integer, return its corresponding column title as appear in an Excel sheet.

For example:

    1 -> A
    2 -> B
    3 -> C
    ...
    26 -> Z
    27 -> AA
    28 -> AB 
    ...
Example 1:

class Solution(object):
    def convertToTitle(self,num):
        result = []
        while num > 0:
            result.append(chr((num-1)%26+ord('A')))
            num = (num-1) // 26
        result.reverse()
        return ''.join(result)
        
 Next challenges:
Ugly Number II
Sum of Square Numbers
Stone Game
